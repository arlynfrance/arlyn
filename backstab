-- Place this LocalScript inside StarterPlayer > StarterPlayerScripts
-- You must have TweenService and a UI gradient in use

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = char:WaitForChild("HumanoidRootPart")

local range = 7.2 -- default range, can be changed with slider
local backstabEnabled = false
local tweening = false

-- // UI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BackstabUI"
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.IgnoreGuiInset = true
screenGui.ResetOnSpawn = false

-- Background frame
local bgFrame = Instance.new("Frame")
bgFrame.Size = UDim2.new(0, 250, 0, 140)
bgFrame.Position = UDim2.new(0.05, 0, 0.2, 0)
bgFrame.BackgroundColor3 = Color3.fromRGB(48, 29, 84) -- dark purple
bgFrame.BorderSizePixel = 0
bgFrame.Parent = screenGui

-- Gradient
local gradient = Instance.new("UIGradient")
gradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(48, 29, 84)), -- top
    ColorSequenceKeypoint.new(1, Color3.fromRGB(82, 54, 122))  -- bottom
})
gradient.Rotation = 90
gradient.Parent = bgFrame

-- Animate gradient offset up & down
task.spawn(function()
    local direction = 1
    while true do
        local tween = TweenService:Create(gradient, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
            Offset = Vector2.new(0, direction)
        })
        tween:Play()
        tween.Completed:Wait()
        direction = -direction
    end
end)

-- Title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "mocks' backstab script"
title.TextColor3 = Color3.fromRGB(157, 128, 190) -- light purple
title.Font = Enum.Font.Code -- closest to matrix style in Roblox
title.TextSize = 20
title.Parent = bgFrame

-- Backstab Button
local stabButton = Instance.new("TextButton")
stabButton.Size = UDim2.new(0.9, 0, 0, 35)
stabButton.Position = UDim2.new(0.05, 0, 0.3, 0)
stabButton.BackgroundColor3 = Color3.fromRGB(82, 54, 122) -- default OFF color
stabButton.Text = "Backstab: OFF"
stabButton.TextColor3 = Color3.fromRGB(157, 128, 190)
stabButton.Font = Enum.Font.Code
stabButton.TextSize = 18
stabButton.Parent = bgFrame

-- Slider label
local sliderLabel = Instance.new("TextLabel")
sliderLabel.Size = UDim2.new(1, 0, 0, 20)
sliderLabel.Position = UDim2.new(0, 0, 0.65, 0)
sliderLabel.BackgroundTransparency = 1
sliderLabel.Text = "Range: " .. tostring(range)
sliderLabel.TextColor3 = Color3.fromRGB(157, 128, 190)
sliderLabel.Font = Enum.Font.Code
sliderLabel.TextSize = 16
sliderLabel.Parent = bgFrame

-- Slider
local slider = Instance.new("TextButton")
slider.Size = UDim2.new(0.9, 0, 0, 10)
slider.Position = UDim2.new(0.05, 0, 0.85, 0)
slider.BackgroundColor3 = Color3.fromRGB(157, 128, 190)
slider.Text = ""
slider.AutoButtonColor = false
slider.Parent = bgFrame

local sliderKnob = Instance.new("Frame")
sliderKnob.Size = UDim2.new(0, 12, 0, 20)
sliderKnob.Position = UDim2.new(range / 10, -6, -0.5, 0)
sliderKnob.BackgroundColor3 = Color3.fromRGB(48, 29, 84)
sliderKnob.BorderSizePixel = 0
sliderKnob.Parent = slider

-- Slider drag logic
local UIS = game:GetService("UserInputService")
local dragging = false

slider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
    end
end)
UIS.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)
UIS.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local relX = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
        range = math.floor(relX * 9) + 1
        sliderKnob.Position = UDim2.new(range / 10, -6, -0.5, 0)
        sliderLabel.Text = "Range: " .. tostring(range)
    end
end)

-- Button toggle
stabButton.MouseButton1Click:Connect(function()
    backstabEnabled = not backstabEnabled
    if backstabEnabled then
        stabButton.BackgroundColor3 = Color3.fromRGB(157, 128, 190)
        stabButton.TextColor3 = Color3.fromRGB(48, 29, 84)
        stabButton.Text = "Backstab: ON"
    else
        stabButton.BackgroundColor3 = Color3.fromRGB(82, 54, 122)
        stabButton.TextColor3 = Color3.fromRGB(157, 128, 190)
        stabButton.Text = "Backstab: OFF"
    end
end)

-- Backstab logic
RunService.RenderStepped:Connect(function()
    if not backstabEnabled or tweening then return end
    local killer = workspace:FindFirstChild("Killer") -- adjust name
    if killer and killer:FindFirstChild("HumanoidRootPart") then
        local dist = (humanoidRootPart.Position - killer.HumanoidRootPart.Position).Magnitude
        if dist <= range then
            tweening = true
            local backPos = killer.HumanoidRootPart.CFrame * CFrame.new(0, 0, 4.2)
            local tween = TweenService:Create(humanoidRootPart, TweenInfo.new(0.5, Enum.EasingStyle.Sine), {CFrame = backPos})
            tween:Play()
            tween.Completed:Wait()
            tweening = false
        end
    end
end)

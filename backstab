local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local lp = Players.LocalPlayer

-- Vars
local enabled = false
local range = 4
local cooldown = false
local lastTarget = nil
local daggerRemote = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")
local killersFolder = workspace:WaitForChild("Players"):WaitForChild("Killers")
local killerNames = { "Jason", "c00lkidd", "JohnDoe", "1x1x1x1", "Noli" }

-- UI Setup (Matrix style purple theme)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BackstabToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = lp:WaitForChild("PlayerGui")

-- Background Frame
local bgFrame = Instance.new("Frame")
bgFrame.Size = UDim2.new(0, 180, 0, 150)
bgFrame.Position = UDim2.new(0, 10, 0, 10)
bgFrame.BackgroundColor3 = Color3.fromRGB(40, 0, 40)
bgFrame.BorderSizePixel = 0
bgFrame.Parent = screenGui

-- Gradient
local gradient = Instance.new("UIGradient")
gradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 0, 40)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 0, 80))
}
gradient.Rotation = 90
gradient.Parent = bgFrame

-- Title
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, 0, 0, 30)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "mocks' backstab script"
titleLabel.TextColor3 = Color3.fromRGB(200, 160, 255)
titleLabel.Font = Enum.Font.Code
titleLabel.TextSize = 18
titleLabel.Parent = bgFrame

-- Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(1, -20, 0, 35)
toggleButton.Position = UDim2.new(0, 10, 0, 35)
toggleButton.BackgroundColor3 = Color3.fromRGB(60, 0, 60)
toggleButton.TextColor3 = Color3.fromRGB(200, 160, 255)
toggleButton.Font = Enum.Font.Code
toggleButton.TextSize = 18
toggleButton.Text = "Backstab: OFF"
toggleButton.Parent = bgFrame

toggleButton.MouseButton1Click:Connect(function()
	enabled = not enabled
	toggleButton.Text = "Backstab: " .. (enabled and "ON" or "OFF")
	toggleButton.BackgroundColor3 = enabled and Color3.fromRGB(100, 0, 100) or Color3.fromRGB(60, 0, 60)
end)

-- Range Slider
local rangeLabel = Instance.new("TextLabel")
rangeLabel.Size = UDim2.new(1, -20, 0, 20)
rangeLabel.Position = UDim2.new(0, 10, 0, 75)
rangeLabel.BackgroundTransparency = 1
rangeLabel.TextColor3 = Color3.fromRGB(200, 160, 255)
rangeLabel.Font = Enum.Font.Code
rangeLabel.TextSize = 16
rangeLabel.Text = "Range: " .. range
rangeLabel.Parent = bgFrame

local slider = Instance.new("TextButton")
slider.Size = UDim2.new(1, -20, 0, 15)
slider.Position = UDim2.new(0, 10, 0, 95)
slider.BackgroundColor3 = Color3.fromRGB(80, 0, 80)
slider.Text = ""
slider.AutoButtonColor = false
slider.Parent = bgFrame

local sliderHandle = Instance.new("Frame")
sliderHandle.Size = UDim2.new(0, 10, 1, 0)
sliderHandle.Position = UDim2.new((range - 1) / 9, 0, 0, 0)
sliderHandle.BackgroundColor3 = Color3.fromRGB(200, 160, 255)
sliderHandle.Parent = slider

local draggingSlider = false
slider.MouseButton1Down:Connect(function()
	draggingSlider = true
end)
slider.MouseButton1Up:Connect(function()
	draggingSlider = false
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
	if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
		local relativeX = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
		range = math.floor(relativeX * 9) + 1
		sliderHandle.Position = UDim2.new((range - 1) / 9, 0, 0, 0)
		rangeLabel.Text = "Range: " .. range
	end
end)

-- Minimize Button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 20, 0, 20)
minimizeButton.Position = UDim2.new(1, -25, 0, 5)
minimizeButton.BackgroundColor3 = Color3.fromRGB(80, 0, 80)
minimizeButton.TextColor3 = Color3.fromRGB(200, 160, 255)
minimizeButton.Font = Enum.Font.Code
minimizeButton.TextSize = 14
minimizeButton.Text = "-"
minimizeButton.Parent = bgFrame

local minimized = false
minimizeButton.MouseButton1Click:Connect(function()
	minimized = not minimized
	for _, child in ipairs(bgFrame:GetChildren()) do
		if child ~= titleLabel and child ~= minimizeButton and child ~= gradient then
			child.Visible = not minimized
		end
	end
	bgFrame.Size = minimized and UDim2.new(0, 180, 0, 30) or UDim2.new(0, 180, 0, 150)
end)

-- Draggable
local UIS = game:GetService("UserInputService")
local dragging, dragStart, startPos
bgFrame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = bgFrame.Position
	end
end)
bgFrame.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
	end
end)
UIS.InputChanged:Connect(function(input)
	if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
		local delta = input.Position - dragStart
		bgFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

-- Smooth movement + dagger logic
local function smoothMoveBehind(hrp, targetHRP)
	local goalPos = targetHRP.Position - (targetHRP.CFrame.LookVector * 4.2)
	local tween = TweenService:Create(hrp, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {CFrame = CFrame.new(goalPos, goalPos + targetHRP.CFrame.LookVector)})
	tween:Play()
end

RunService.Heartbeat:Connect(function()
	if not enabled or cooldown then return end
	local char = lp.Character
	if not (char and char:FindFirstChild("HumanoidRootPart")) then return end
	local hrp = char.HumanoidRootPart

	for _, name in ipairs(killerNames) do
		local killer = killersFolder:FindFirstChild(name)
		if killer and killer:FindFirstChild("HumanoidRootPart") then
			local kHRP = killer.HumanoidRootPart
			local dist = (hrp.Position - kHRP.Position).Magnitude

			if dist <= range and killer ~= lastTarget then
				lastTarget = killer
				cooldown = true

				-- Start following until dagger triggers
				local followConn
				followConn = RunService.Heartbeat:Connect(function()
					if not killer.Parent or not char.Parent then
						followConn:Disconnect()
						return
					end
					smoothMoveBehind(hrp, kHRP)
				end)

				-- Fire dagger
				daggerRemote:FireServer("UseActorAbility", "Dagger")

				-- Stop following shortly after dagger
				task.delay(0.3, function()
					if followConn then followConn:Disconnect() end
					lastTarget = nil
					cooldown = false
				end)

				break
			end
		end
	end
end)

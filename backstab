--// Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

--// Player and character references
local lp = Players.LocalPlayer
local char = lp.Character or lp.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

--// Variables
local detectionRange = 5
local behindDistance = 3.8
local tweenTime = 0.35
local cooldownTime = 30
local enabled = false
local canTween = true
local killer

--// GUI Setup
local playerGui = lp:WaitForChild("PlayerGui")
local existingGui = playerGui:FindFirstChild("BackstabToggleGui")
if existingGui then existingGui:Destroy() end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BackstabToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

-- Toggle Button
local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 100, 0, 30)
toggleBtn.Position = UDim2.new(0, 10, 0, 10)
toggleBtn.BackgroundColor3 = Color3.fromRGB(89, 44, 47)
toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleBtn.Text = "OFF"
toggleBtn.Parent = screenGui

-- Range Box
local rangeBox = Instance.new("TextBox")
rangeBox.Size = UDim2.new(0, 100, 0, 30)
rangeBox.Position = UDim2.new(0, 10, 0, 50)
rangeBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
rangeBox.TextColor3 = Color3.fromRGB(255, 255, 255)
rangeBox.Text = tostring(detectionRange)
rangeBox.Parent = screenGui

-- @mocksss Label
local mockLabel = Instance.new("TextLabel")
mockLabel.Size = UDim2.new(0, 100, 0, 20)
mockLabel.Position = UDim2.new(0, 10, 0, 85)
mockLabel.BackgroundTransparency = 1
mockLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
mockLabel.Text = "@mocksss"
mockLabel.Parent = screenGui

--// GUI Logic
toggleBtn.MouseButton1Click:Connect(function()
	enabled = not enabled
	if enabled then
		toggleBtn.Text = "ON"
	else
		toggleBtn.Text = "OFF"
	end
end)

rangeBox.FocusLost:Connect(function()
	local num = tonumber(rangeBox.Text)
	if num then
		if num > 10 then
			num = 10
			rangeBox.Text = "10"
		end
		detectionRange = num
	else
		rangeBox.Text = tostring(detectionRange)
	end
end)

--// Killer Detection
local function findKiller()
	for _, plr in pairs(Players:GetPlayers()) do
		if plr ~= lp and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then
			-- In Forsaken, you'd detect via tags or weapons, here simplified to nearest alive
			if plr.Character.Humanoid.Health > 0 then
				return plr
			end
		end
	end
	return nil
end

--// Tween Behind Killer
local function tweenBehindKiller(killerHRP)
	if not canTween then return end
	canTween = false

	local killerLook = killerHRP.CFrame.LookVector
	local behindPos = killerHRP.Position - killerLook * behindDistance
	local targetCFrame = CFrame.new(behindPos) * CFrame.Angles(0, math.atan2(killerLook.X, killerLook.Z), 0)

	local tween = TweenService:Create(hrp, TweenInfo.new(tweenTime, Enum.EasingStyle.Linear), {
		CFrame = targetCFrame
	})

	tween:Play()
	tween.Completed:Connect(function()
		-- Fire dagger instantly
		ReplicatedStorage:WaitForChild("Events"):WaitForChild("Dagger"):FireServer()
		task.delay(cooldownTime, function()
			canTween = true
		end)
	end)
end

--// Main Loop
task.spawn(function()
	while task.wait(0.1) do
		if enabled then
			killer = findKiller()
			if killer and killer.Character and killer.Character:FindFirstChild("HumanoidRootPart") then
				local dist = (killer.Character.HumanoidRootPart.Position - hrp.Position).Magnitude
				if dist <= detectionRange then
					tweenBehindKiller(killer.Character.HumanoidRootPart)
				end
			end
		end
	end
end)

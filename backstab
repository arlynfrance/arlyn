local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local lp = Players.LocalPlayer

-- GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BackstabToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = lp:WaitForChild("PlayerGui")

-- Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 150, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 20
toggleButton.Text = "Backstab: OFF"
toggleButton.Parent = screenGui

local toggleButtonCorner = Instance.new("UICorner")
toggleButtonCorner.CornerRadius = UDim.new(0, 6)
toggleButtonCorner.Parent = toggleButton

-- Range Label
local rangeLabel = Instance.new("TextLabel")
rangeLabel.Size = UDim2.new(0, 150, 0, 20)
rangeLabel.Position = UDim2.new(0, 10, 0, 55)
rangeLabel.BackgroundTransparency = 1
rangeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
rangeLabel.Font = Enum.Font.SourceSans
rangeLabel.TextSize = 16
rangeLabel.Text = "Range:"
rangeLabel.Parent = screenGui

-- TextBox for Range Input
local rangeBox = Instance.new("TextBox")
rangeBox.Size = UDim2.new(0, 150, 0, 25)
rangeBox.Position = UDim2.new(0, 10, 0, 75)
rangeBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
rangeBox.TextColor3 = Color3.fromRGB(255, 255, 255)
rangeBox.Font = Enum.Font.SourceSans
rangeBox.TextSize = 16
rangeBox.PlaceholderText = "Enter range (1 - 10)"
rangeBox.Text = "4"
rangeBox.ClearTextOnFocus = false
rangeBox.Parent = screenGui

local rangeBoxCorner = Instance.new("UICorner")
rangeBoxCorner.CornerRadius = UDim.new(0, 4)
rangeBoxCorner.Parent = rangeBox

-- Vars
local enabled = false
local cooldown = false
local lastTarget = nil
local range = 4
local daggerRemote = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")
local killerNames = { "Jason", "c00lkidd", "JohnDoe", "1x1x1x1", "Noli" }
local killersFolder = workspace:WaitForChild("Players"):WaitForChild("Killers")

-- Dagger cooldown vars
local daggerCooldownActive = false
local daggerCooldownTime = 30 -- 30 seconds cooldown

-- GUI toggle
toggleButton.MouseButton1Click:Connect(function()
	enabled = not enabled
	toggleButton.Text = "Backstab: " .. (enabled and "ON" or "OFF")
	toggleButton.BackgroundColor3 = enabled and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(30, 30, 30)
end)

-- TextBox Range Handling
rangeBox.FocusLost:Connect(function()
	local input = tonumber(rangeBox.Text)
	if input and input >= 1 and input <= 10 then
		range = input
	else
		rangeBox.Text = tostring(range) -- Revert to last valid value
	end
end)

-- Helper function to check if player is behind target (always behind)
local function isBehindTarget(hrp, targetHRP)
	local distance = (hrp.Position - targetHRP.Position).Magnitude
	if distance > range then
		return false
	end
	
	local direction = -targetHRP.CFrame.LookVector
	local toPlayer = (hrp.Position - targetHRP.Position)
	return toPlayer:Dot(direction) > 0.5
end

local tweenDuration = 0.2 -- faster tween time
local holdBehindTime = 0.5 -- time to stay behind killer after tween

-- Main loop
RunService.Heartbeat:Connect(function()
	if not enabled or cooldown then return end

	local char = lp.Character
	if not (char and char:FindFirstChild("HumanoidRootPart")) then return end
	local hrp = char.HumanoidRootPart

	for _, name in ipairs(killerNames) do
		local killer = killersFolder:FindFirstChild(name)
		if killer and killer:FindFirstChild("HumanoidRootPart") then
			local kHRP = killer.HumanoidRootPart

			if isBehindTarget(hrp, kHRP) and killer ~= lastTarget then
				cooldown = true
				lastTarget = killer

				local daggerUsed = false
				local alignConnection

				-- Function to create and play tween to updated behind position
				local function tweenToBehind()
					if not (hrp and kHRP) then return end
					local behindPos = kHRP.Position - (kHRP.CFrame.LookVector * 0.3)
					local targetCFrame = CFrame.new(behindPos, behindPos + kHRP.CFrame.LookVector)
					local tweenInfo = TweenInfo.new(tweenDuration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
					local tween = TweenService:Create(hrp, tweenInfo, {CFrame = targetCFrame})
					tween:Play()
					return tween
				end

				-- Start with initial tween
				local currentTween = tweenToBehind()

				-- Fire dagger once tween completes, respecting cooldown
				currentTween.Completed:Connect(function()
					if not daggerUsed and not daggerCooldownActive then
						daggerUsed = true
						daggerCooldownActive = true
						daggerRemote:FireServer("UseActorAbility", "Dagger")

						task.delay(daggerCooldownTime, function()
							daggerCooldownActive = false
						end)
					end
				end)

				-- Align facing and keep tweening behind continuously
				alignConnection = RunService.Heartbeat:Connect(function()
					if not (char and char.Parent and kHRP and kHRP.Parent) then
						alignConnection:Disconnect()
						return
					end

					-- Align facing direction (works in shiftlock)
					local lookVector = kHRP.CFrame.LookVector
					local currentPos = hrp.Position
					hrp.CFrame = CFrame.new(currentPos, currentPos + lookVector)

					-- If current tween finished or nil, start a new tween to updated position
					if not currentTween or currentTween.PlaybackState == Enum.PlaybackState.Completed then
						currentTween = tweenToBehind()
						currentTween.Completed:Connect(function()
							if not daggerUsed and not daggerCooldownActive then
								daggerUsed = true
								daggerCooldownActive = true
								daggerRemote:FireServer("UseActorAbility", "Dagger")

								task.delay(daggerCooldownTime, function()
									daggerCooldownActive = false
								end)
							end
						end)
					end
				end)

				-- Hold behind the killer for 0.5 seconds after tween before resetting cooldown
				task.spawn(function()
					local holdStart = tick()
					while tick() - holdStart < holdBehindTime do
						RunService.Heartbeat:Wait()
					end

					-- After hold time, wait until player leaves range to reset cooldown and lastTarget
					while isBehindTarget(hrp, kHRP) do
						RunService.Heartbeat:Wait()
					end

					if alignConnection then
						alignConnection:Disconnect()
					end
					lastTarget = nil
					cooldown = false
				end)

				break
			end
		end
	end
end)

-- Complete LocalScript: Backstab GUI (screenshot style) + ESP/Tracers (everyone) + Smooth Teleport
-- Place as LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local camera = workspace.CurrentCamera

local lp = Players.LocalPlayer

-- Backstab settings (keeps existing behavior)
local enabled = false
local cooldown = false
local lastTarget = nil
local range = 4.0
local mode = "behind" -- screenshot lower-case
local daggerRemote = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")

-- These are still used for the backstab target detection (you can keep them or modify)
local killerNames = { "Jason", "c00lkidd", "JohnDoe", "1x1x1x1", "Noli" }
local killersFolder = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Killers") or nil
-- if the game doesn't have killersFolder, backstab will still function for characters discovered in players list

-- Visual toggles
local espEnabled = false
local tracersEnabled = false

-- Create ScreenGui + mainFrame (match screenshot layout)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MocksBackstabGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = lp:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 540, 0, 300)
mainFrame.Position = UDim2.new(0, 10, 0, -350) -- hidden above initially
mainFrame.BackgroundColor3 = Color3.fromRGB(34, 38, 45)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = screenGui
mainFrame.Visible = false

local outerStroke = Instance.new("UIStroke")
outerStroke.Parent = mainFrame
outerStroke.Color = Color3.fromRGB(148, 82, 255)
outerStroke.Thickness = 3

-- Title bar
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 28)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.fromRGB(60, 60, 67)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleText = Instance.new("TextLabel")
titleText.Size = UDim2.new(1, -12, 1, 0)
titleText.Position = UDim2.new(0, 6, 0, 0)
titleText.BackgroundTransparency = 1
titleText.Text = "MOCKS'  BACKSTAB  SCRIPT"
titleText.Font = Enum.Font.Code
titleText.TextSize = 14
titleText.TextColor3 = Color3.fromRGB(200, 200, 200)
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.Parent = titleBar

local divider = Instance.new("Frame")
divider.Size = UDim2.new(1, -12, 0, 6)
divider.Position = UDim2.new(0, 6, 0, 28)
divider.BackgroundColor3 = Color3.fromRGB(70, 70, 78)
divider.BorderSizePixel = 0
divider.Parent = mainFrame

-- Left panel (controls)
local leftPanel = Instance.new("Frame")
leftPanel.Size = UDim2.new(0, 170, 1, -40)
leftPanel.Position = UDim2.new(0, 6, 0, 36)
leftPanel.BackgroundColor3 = Color3.fromRGB(40, 42, 48)
leftPanel.BorderSizePixel = 0
leftPanel.Parent = mainFrame

-- Mid separator
local midSep = Instance.new("Frame")
midSep.Size = UDim2.new(0, 6, 1, -40)
midSep.Position = UDim2.new(0, 180, 0, 36)
midSep.BackgroundColor3 = Color3.fromRGB(70, 70, 78)
midSep.BorderSizePixel = 0
midSep.Parent = mainFrame

-- Right small panel
local rightPanel = Instance.new("Frame")
rightPanel.Size = UDim2.new(0, 170, 1, -40)
rightPanel.Position = UDim2.new(0, 192, 0, 36)
rightPanel.BackgroundColor3 = Color3.fromRGB(46, 48, 55)
rightPanel.BorderSizePixel = 0
rightPanel.Parent = mainFrame

-- Big dark area on the right (visual)
local bigArea = Instance.new("Frame")
bigArea.Size = UDim2.new(1, -12 - 178, 1, -46)
bigArea.Position = UDim2.new(0, 374, 0, 36)
bigArea.BackgroundColor3 = Color3.fromRGB(32, 34, 39)
bigArea.BorderSizePixel = 0
bigArea.Parent = mainFrame

local bigAreaSep = Instance.new("Frame")
bigAreaSep.Size = UDim2.new(1, 0, 0, 6)
bigAreaSep.Position = UDim2.new(0, 0, 0, 0)
bigAreaSep.BackgroundColor3 = Color3.fromRGB(70,70,78)
bigAreaSep.Parent = bigArea

-- Helper to make small buttons (screenshot style)
local function makeSmallButton(parent, name, pos, size, text)
	local b = Instance.new("TextButton")
	b.Name = name
	b.Size = size
	b.Position = pos
	b.BackgroundColor3 = Color3.fromRGB(95, 95, 100)
	b.BorderSizePixel = 0
	b.Font = Enum.Font.Code
	b.TextSize = 14
	b.TextColor3 = Color3.fromRGB(20, 20, 20)
	b.Text = text
	b.Parent = parent
	return b
end

local backstabBtn = makeSmallButton(leftPanel, "BackstabBtn", UDim2.new(0, 8, 0, 8), UDim2.new(0, 150, 0, 28), "backstab: off")

local rangeLabel = Instance.new("TextLabel")
rangeLabel.Size = UDim2.new(0, 150, 0, 18)
rangeLabel.Position = UDim2.new(0, 8, 0, 42)
rangeLabel.BackgroundTransparency = 1
rangeLabel.Font = Enum.Font.Code
rangeLabel.TextSize = 14
rangeLabel.TextColor3 = Color3.fromRGB(200,200,200)
rangeLabel.Text = ("range: %.1f"):format(range)
rangeLabel.TextXAlignment = Enum.TextXAlignment.Left
rangeLabel.Parent = leftPanel

-- Slider
local sliderBg = Instance.new("Frame")
sliderBg.Size = UDim2.new(0, 150, 0, 12)
sliderBg.Position = UDim2.new(0, 8, 0, 64)
sliderBg.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
sliderBg.BorderSizePixel = 0
sliderBg.Parent = leftPanel

local sliderFill = Instance.new("Frame")
sliderFill.Size = UDim2.new((range - 1) / 9, 0, 1, 0)
sliderFill.Position = UDim2.new(0, 0, 0, 0)
sliderFill.BackgroundColor3 = Color3.fromRGB(110,110,120)
sliderFill.BorderSizePixel = 0
sliderFill.Parent = sliderBg

local sliderKnob = Instance.new("TextButton")
sliderKnob.Size = UDim2.new(0, 12, 0, 12)
sliderKnob.Position = UDim2.new((range - 1) / 9, -6, 0, 0)
sliderKnob.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
sliderKnob.BorderSizePixel = 0
sliderKnob.AutoButtonColor = false
sliderKnob.Parent = sliderBg

local modeBtn = makeSmallButton(leftPanel, "ModeBtn", UDim2.new(0, 8, 0, 92), UDim2.new(0, 150, 0, 24), "mode:behind")

local espBtn = makeSmallButton(rightPanel, "ESPBtn", UDim2.new(0, 8, 0, 8), UDim2.new(0, 120, 0, 28), "esp: off")
local tracerBtn = makeSmallButton(rightPanel, "TracerBtn", UDim2.new(0, 8, 0, 44), UDim2.new(0, 120, 0, 28), "tracers:off")

-- Inner top border
local innerTop = Instance.new("Frame")
innerTop.Size = UDim2.new(1, -12, 0, 6)
innerTop.Position = UDim2.new(0, 6, 0, 32)
innerTop.BorderSizePixel = 0
innerTop.BackgroundColor3 = Color3.fromRGB(74,74,82)
innerTop.Parent = mainFrame

-- GUI visibility toggle (RightShift)
local guiVisible = false
local function toggleGui()
	guiVisible = not guiVisible
	if guiVisible then
		mainFrame.Visible = true
		TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			Position = UDim2.new(0, 10, 0, 10)
		}):Play()
	else
		local t = TweenService:Create(mainFrame, TweenInfo.new(0.35, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
			Position = UDim2.new(0, 10, 0, -350)
		})
		t:Play()
		t.Completed:Connect(function()
			if not guiVisible then
				mainFrame.Visible = false
			end
		end)
	end
end

UserInputService.InputBegan:Connect(function(input, processed)
	if processed then return end
	if input.KeyCode == Enum.KeyCode.RightShift then
		toggleGui()
	end
end)

-- Slider dragging logic
local dragging = false
local function setSliderFromX(x)
	local absPos = sliderBg.AbsolutePosition.X
	local absSize = sliderBg.AbsoluteSize.X
	local localX = math.clamp(x - absPos, 0, absSize)
	local pct = (absSize > 0) and (localX / absSize) or 0
	sliderFill.Size = UDim2.new(pct, 0, 1, 0)
	sliderKnob.Position = UDim2.new(pct, -6, 0, 0)
	range = 1 + pct * 9
	rangeLabel.Text = ("range: %.1f"):format(range)
end

sliderKnob.MouseButton1Down:Connect(function()
	dragging = true
end)

UserInputService.InputChanged:Connect(function(inp)
	if dragging and inp.UserInputType == Enum.UserInputType.MouseMovement then
		setSliderFromX(inp.Position.X)
	end
end)

UserInputService.InputEnded:Connect(function(inp)
	if inp.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
	end
end)

-- Button behaviors
backstabBtn.MouseButton1Click:Connect(function()
	enabled = not enabled
	backstabBtn.Text = "backstab: " .. (enabled and "on" or "off")
	backstabBtn.BackgroundColor3 = enabled and Color3.fromRGB(90,180,90) or Color3.fromRGB(95,95,100)
end)

modeBtn.MouseButton1Click:Connect(function()
	if mode == "behind" then
		mode = "around"
	else
		mode = "behind"
	end
	modeBtn.Text = "mode:" .. mode
end)

espBtn.MouseButton1Click:Connect(function()
	espEnabled = not espEnabled
	espBtn.Text = "esp: " .. (espEnabled and "on" or "off")
	espBtn.BackgroundColor3 = espEnabled and Color3.fromRGB(120,120,140) or Color3.fromRGB(95,95,100)
end)

tracerBtn.MouseButton1Click:Connect(function()
	tracersEnabled = not tracersEnabled
	tracerBtn.Text = "tracers:" .. (tracersEnabled and "on" or "off")
	tracerBtn.BackgroundColor3 = tracersEnabled and Color3.fromRGB(120,120,140) or Color3.fromRGB(95,95,100)
end)

-- Helper: isBehindTarget (uses same logic as your original)
local function isBehindTarget(hrp, targetHRP)
	local distance = (hrp.Position - targetHRP.Position).Magnitude
	if distance > range then
		return false
	end
	if mode == "around" then
		return true
	else
		local direction = -targetHRP.CFrame.LookVector
		local toPlayer = (hrp.Position - targetHRP.Position)
		return toPlayer:Dot(direction) > 0.5
	end
end

-- Overlays for ESP/tracers (screen GUI frames)
local overlayFolder = Instance.new("Folder", screenGui)
overlayFolder.Name = "Overlays"
local espOverlays = {}    -- playerName -> Frame
local tracerOverlays = {} -- playerName -> Frame (line)

local function createESPOverlayFor(name)
	if espOverlays[name] then return espOverlays[name] end
	local f = Instance.new("Frame")
	f.Name = "ESP_" .. name
	f.Size = UDim2.new(0, 80, 0, 110)
	f.AnchorPoint = Vector2.new(0.5, 0.5)
	f.BackgroundTransparency = 1
	f.BorderSizePixel = 0
	f.Parent = overlayFolder

	local border = Instance.new("Frame")
	border.Name = "Border"
	border.Size = UDim2.new(1, 0, 1, 0)
	border.Position = UDim2.new(0, 0, 0, 0)
	border.BorderSizePixel = 0
	border.BackgroundTransparency = 1
	border.Parent = f

	local stroke = Instance.new("UIStroke")
	stroke.Parent = border
	stroke.Color = Color3.fromRGB(200,200,200)
	stroke.Thickness = 1
	return f
end

local function createTracerOverlayFor(name)
	if tracerOverlays[name] then return tracerOverlays[name] end
	local t = Instance.new("Frame")
	t.Name = "Tracer_" .. name
	t.BorderSizePixel = 0
	t.BackgroundColor3 = Color3.fromRGB(140,140,160)
	t.Size = UDim2.new(0, 0, 0, 2)
	t.AnchorPoint = Vector2.new(0, 0.5)
	t.Position = UDim2.new(0, 0, 0, 0)
	t.Parent = overlayFolder
	return t
end

local function removeOverlaysFor(name)
	if espOverlays[name] then espOverlays[name]:Destroy(); espOverlays[name] = nil end
	if tracerOverlays[name] then tracerOverlays[name]:Destroy(); tracerOverlays[name] = nil end
end

-- Remove overlays when players leave
Players.PlayerRemoving:Connect(function(plr)
	removeOverlaysFor(plr.Name)
end)

-- Render loop: update overlays & backstab logic
RunService.RenderStepped:Connect(function()
	local char = lp.Character
	if not (char and char:FindFirstChild("HumanoidRootPart")) then
		-- if no character, clear overlays
		for name,_ in pairs(espOverlays) do removeOverlaysFor(name) end
		for name,_ in pairs(tracerOverlays) do removeOverlaysFor(name) end
		return
	end
	local hrp = char.HumanoidRootPart

	-- Update overlays for all other players
	for _, other in ipairs(Players:GetPlayers()) do
		if other ~= lp then
			local otherChar = other.Character
			local targetHRP = otherChar and (otherChar:FindFirstChild("HumanoidRootPart") or otherChar:FindFirstChild("Torso") or otherChar:FindFirstChild("UpperTorso"))
			if targetHRP then
				local worldPos = targetHRP.Position + Vector3.new(0, 2.2, 0)
				local point, onScreen = camera:WorldToViewportPoint(worldPos)
				local screenPos = Vector2.new(point.X, point.Y)

				-- ESP
				if espEnabled then
					if not espOverlays[other.Name] then
						espOverlays[other.Name] = createESPOverlayFor(other.Name)
					end
					local overlay = espOverlays[other.Name]
					local dist = (camera.CFrame.Position - worldPos).Magnitude
					local scale = math.clamp(1800 / math.max(dist, 1), 40, 200)
					local w = math.floor(scale * 0.6)
					local h = math.floor(scale)
					overlay.Size = UDim2.new(0, w, 0, h)
					-- Position: use AbsolutePosition via setting Position = UDim2.new(0, x, 0, y)
					overlay.Position = UDim2.new(0, screenPos.X - (w / 2), 0, screenPos.Y - (h / 2))
					overlay.Visible = onScreen
				else
					if espOverlays[other.Name] then removeOverlaysFor(other.Name) end
				end

				-- Tracers
				if tracersEnabled then
					if not tracerOverlays[other.Name] then
						tracerOverlays[other.Name] = createTracerOverlayFor(other.Name)
					end
					local tracer = tracerOverlays[other.Name]
					local headPos = targetHRP.Position + Vector3.new(0, 1.5, 0)
					local p, ons = camera:WorldToViewportPoint(headPos)
					local sp = Vector2.new(p.X, p.Y)
					local origin = Vector2.new(camera.ViewportSize.X * 0.5, camera.ViewportSize.Y - 36)
					local delta = sp - origin
					local dist = delta.Magnitude
					local angle = math.deg(math.atan2(delta.Y, delta.X))
					tracer.Size = UDim2.new(0, dist, 0, 2)
					tracer.Position = UDim2.new(0, origin.X, 0, origin.Y)
					tracer.Rotation = angle
					tracer.AnchorPoint = Vector2.new(0, 0.5)
					tracer.Visible = ons
				else
					if tracerOverlays[other.Name] then removeOverlaysFor(other.Name) end
				end
			else
				-- character not present: cleanup overlays
				if espOverlays[other.Name] or tracerOverlays[other.Name] then
					removeOverlaysFor(other.Name)
				end
			end
		end
	end

	-- Backstab logic: still respects killersFolder if present; otherwise will only work if killers exist
	-- We'll also check killersFolder if present, otherwise iterate killerNames in workspace.Players.Killers if any
	local function iterateKillers()
		local list = {}
		if killersFolder and typeof(killersFolder.FindFirstChild) == "function" then
			for _, nm in ipairs(killerNames) do
				local k = killersFolder:FindFirstChild(nm)
				if k then table.insert(list, k) end
			end
		end
		return list
	end

	local killersToCheck = iterateKillers()

	-- If there are no special killers in workspace, also check other players' characters as potential targets
	if #killersToCheck == 0 then
		for _, other in ipairs(Players:GetPlayers()) do
			if other ~= lp and other.Character and other.Character:FindFirstChild("HumanoidRootPart") then
				table.insert(killersToCheck, other.Character)
			end
		end
	end

	-- Evaluate each candidate for backstab
	for _, kobj in ipairs(killersToCheck) do
		local kHRP = kobj and kobj:FindFirstChild("HumanoidRootPart")
		if kHRP then
			if enabled and not cooldown and isBehindTarget(hrp, kHRP) and kobj ~= lastTarget then
				cooldown = true
				lastTarget = kobj

				local start = tick()
				local didDagger = false

				local localConn
				localConn = RunService.Heartbeat:Connect(function()
					if not (lp.Character and lp.Character.Parent and kHRP and kHRP.Parent) then
						if localConn then localConn:Disconnect() end
						return
					end
					local elapsed = tick() - start
					if elapsed >= 0.5 then
						if localConn then localConn:Disconnect() end
						return
					end

					-- Smooth glide behind target with easing
					local behindPos = kHRP.Position - (kHRP.CFrame.LookVector * 0.3)
					local targetCFrame = CFrame.new(behindPos, behindPos + kHRP.CFrame.LookVector)
					local tween = TweenService:Create(hrp, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), { CFrame = targetCFrame })
					tween:Play()

					-- Align look direction briefly & fire dagger once
					if not didDagger then
						didDagger = true
						local faceStart = tick()
						local faceConn
						faceConn = RunService.Heartbeat:Connect(function()
							if tick() - faceStart >= 0.7 or not kHRP or not kHRP.Parent then
								if faceConn then faceConn:Disconnect() end
								return
							end
							if hrp and hrp.Parent then
								hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + kHRP.CFrame.LookVector)
							end
						end)
						-- Fire dagger remote (safely)
						pcall(function() daggerRemote:FireServer("UseActorAbility", "Dagger") end)
					end
				end)

				-- Reset cooldown after leaving range
				task.delay(2, function()
					RunService.Heartbeat:Wait()
					while isBehindTarget(hrp, kHRP) do
						RunService.Heartbeat:Wait()
					end
					lastTarget = nil
					cooldown = false
				end)

				break
			end
		end
	end
end)
